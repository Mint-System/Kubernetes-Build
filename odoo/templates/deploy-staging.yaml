{{- if .Values.staging.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-odoo-{{ .Values.staging.name }}
  labels:
    app: odoo-{{ .Values.staging.name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  selector:
    matchLabels:
      app: odoo-{{ .Values.staging.name }}
  template:
    metadata:
      labels:
        app: odoo-{{ .Values.staging.name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cm.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: init
          image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for main Odoo deployment to be ready..."
              until curl -f http://odoo:8069/web/health > /dev/null 2>&1; do
                echo "Waiting for main Odoo service to respond..."
                sleep 5
              done
              echo "Main Odoo deployment is ready!"
              
              echo "Clone and neutralize Odoo staging database from main database..."
              echo "Check if staging database already exists and drop it..."
              DB_EXISTS=$(PGPASSWORD=$PGPASSWORD psql -h $PGHOST -U $PGUSER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='{{ .Values.database }}-{{ .Values.staging.name }}';" 2>/dev/null)
              if [ "$DB_EXISTS" = "1" ]; then
                echo "Terminating connections to existing staging database..."
                PGPASSWORD=$PGPASSWORD psql -h $PGHOST -U $PGUSER -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '{{ .Values.database }}-{{ .Values.staging.name }}' AND pid <> pg_backend_pid();" || true
                echo "Dropping existing staging database..."
                PGPASSWORD=$PGPASSWORD psql -h $PGHOST -U $PGUSER -d postgres -c "DROP DATABASE {{ .Values.database }}-{{ .Values.staging.name }};"
              fi
              
              echo "Terminate any active connections to the source database..."
              PGPASSWORD=$PGPASSWORD psql -h $PGHOST -U $PGUSER -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '{{ .Values.cnpg.database }}' AND pid <> pg_backend_pid();" || true
              
              echo "Copying staging database with template..."
              PGPASSWORD=$PGPASSWORD psql -h $PGHOST -U $PGUSER -d postgres -c "CREATE DATABASE \"{{ .Values.database }}-{{ .Values.staging.name }}\" WITH TEMPLATE \"{{ .Values.cnpg.database }}\";"
              
              echo "Neutralizing staging database with Odoo neutralize command..."
              odoo neutralize -d {{ .Values.database }}-{{ .Values.staging.name }} --stop-after-init
              
              echo "Copy filestore from /main-data/ to /staging-data ..."
              mkdir -p /staging-data/filestore
              cp -r /main-data/filestore/{{ .Values.database }} /staging-data/filestore/{{ .Values.database }}-{{ .Values.staging.name }}
              
              echo "Clone and and neutralization staging database completed for {{ .Values.staging.name }}."
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          env:
            {{- if .Values.cnpg.enabled }}
            - name: PGHOST
              value: {{ .Release.Name }}-postgresql-rw.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: password
            {{- end }}
            {{- if .Values.postgres.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretRef }}
                  key: {{ .Values.postgres.userPasswordKey }}
            - name: PGHOST
              value: postgres.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              value: {{ .Values.postgres.user }}
            {{- end }}
            {{- if .Values.vshnPostgres.enabled }}
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_HOST
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PORT
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PASSWORD
            - name: PGSSLMODE
              value: verify-ca
            - name: PGSSLROOTCERT
              value: "/mnt/{{ .Values.vshnPostgres.secretRef }}/ca.crt"
            {{- end }}
          volumeMounts:
            - mountPath: /main-data
              name: odoo-main
              subPath: odoodata
            - mountPath: /staging-data
              name: odoo-staging
              subPath: odoodata
            {{- if .Values.vshnPostgres.enabled }}
            - name: {{ .Values.vshnPostgres.secretRef }}
              readOnly: true
              mountPath: "/mnt/{{ .Values.vshnPostgres.secretRef }}"
            {{- end }}
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      containers:
        - name: odoo
          image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
          - containerPort: 8069
          livenessProbe:
            httpGet:
              path: /web/health
              port: 8069
            initialDelaySeconds: 60
            periodSeconds: 10
          envFrom:
            {{- if and .Values.secretRef (lookup "v1" "Secret" .Release.Namespace .Values.secretRef) }}
            - secretRef:
                name: {{ .Values.secretRef }}
            {{- end }}
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          env:
            - name: DB_FILTER
              value: {{ .Values.database }}-{{ .Values.staging.name }}
            {{- if .Values.cnpg.enabled }}
            - name: PGHOST
              value: {{ .Release.Name }}-postgresql-rw.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: password
            {{- end }}
            {{- if .Values.postgres.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretRef }}
                  key: {{ .Values.postgres.userPasswordKey }}
            - name: PGHOST
              value: postgres.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              value: {{ .Values.postgres.user }}
            {{- end }}
            {{- if .Values.vshnPostgres.enabled }}
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_HOST
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PORT
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PASSWORD
            - name: PGSSLMODE
              value: verify-ca
            - name: PGSSLROOTCERT
              value: "/mnt/{{ .Values.vshnPostgres.secretRef }}/ca.crt"
            {{- end }}
          volumeMounts:
            - mountPath: /var/lib/odoo/
              name: odoo-staging
              subPath: odoodata
            {{- if .Values.vshnPostgres.enabled }}
            - name: {{ .Values.vshnPostgres.secretRef }}
              readOnly: true
              mountPath: "/mnt/{{ .Values.vshnPostgres.secretRef }}"
            {{- end }}
      volumes:
        - name: odoo-staging
          persistentVolumeClaim:
            claimName: data-odoo-staging
        - name: odoo-main
          persistentVolumeClaim:
            claimName: data-odoo-main
        {{- if .Values.vshnPostgres.enabled }}
        - name: {{ .Values.vshnPostgres.secretRef }}
          secret:
            secretName: {{ .Values.vshnPostgres.secretRef }}
        {{- end }}
{{- end }}